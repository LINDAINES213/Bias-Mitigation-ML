name: Build & Deploy GitHub Pages (Notebook -> HTML)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # aseguramos nbconvert para exportar el notebook a HTML
          pip install jupyter nbconvert nbclient pillow

      - name: Ensure docs/ exists
        run: mkdir -p docs
          mkdir -p docs/assets/figures
          mkdir -p docs/assets/downloads

      # Ejecuta el notebook y lo exporta como docs/index.html (home del sitio)
      - name: Execute & export notebook to HTML (respect hide tags)
        env:
          MPLBACKEND: Agg
        run: |
          # Config para ocultar por tags
          cat > nbconvert_config.json << 'EOF'
          {
            "TagRemovePreprocessor": {
              "enabled": true,
              "remove_input_tags": ["hide-input", "hide_input", "remove-input"],
              "remove_all_outputs_tags": ["hide-output", "hide_output", "remove-output"],
            }
          }
          EOF

          jupyter nbconvert \
            --execute bias-mitigation.ipynb \
            --ExecutePreprocessor.timeout=1200 \
            --to html \
            --output index.html \
            --output-dir docs \
            --config nbconvert_config.json

      - name: Collect figures for the site
        shell: bash
        run: |
          shopt -s nullglob
          for f in fairness_plots/*.{png,jpg,jpeg,gif,svg,webp}; do
            cp -f "$f" docs/assets/figures/ || true
          done
      
      - name: Copy optional downloads
        shell: bash
        run: |
          shopt -s nullglob
          for f in results/*.{csv,html}; do
            cp -f "$f" docs/assets/downloads/ || true
          done || true
      
      - name: Copy site assets (logo)
        run: |
          mkdir -p docs/assets
          cp -f LogoUVG.png docs/assets/LogoUVG.png

      # Dejar también la versión ejecutada para descarga
      # - name: Save executed notebook for download (optional)
      #   run: |
      #     mkdir -p docs/assets/downloads
      #     jupyter nbconvert \
      #       --to notebook \
      #       --execute bias-mitigation.ipynb \
      #       --ExecutePreprocessor.timeout=1200 \
      #       --output executed.ipynb \
      #       --output-dir docs/assets/downloads

      - name: Inject figures gallery into index.html
        run: |
          python - << 'PY'
          from pathlib import Path
          import html

          root = Path("docs")
          index = root / "index.html"
          fig_dir = root / "assets" / "figures"
          dl_dir  = root / "assets" / "downloads"

          figs = sorted([p for p in fig_dir.glob("*") if p.suffix.lower() in {".png",".jpg",".jpeg",".gif",".svg",".webp"}])

          gallery_css = """
          <style>
          .gallery-grid {
            display:grid; grid-template-columns:repeat(auto-fill,minmax(260px,1fr));
            gap:12px; margin: 8px 0 24px;
          }
          .gallery-grid figure {
            border:1px solid #e8e8e8; border-radius:10px; padding:10px; margin:0;
          }
          .gallery-grid img {
            width:100%; height:auto; display:block;
          }
          .gallery-grid figcaption {
            font-size:.9rem; margin-top:6px; text-align:center; color:#555;
            word-break: break-word;
          }
          .hr-sep { margin: 24px 0; border:0; height:1px; background:#eee; }
          </style>
          """

          gallery_html = [gallery_css, "<hr class='hr-sep'>", "<h2>✅ Key results</h2>"]
          gallery_html.append("<p>This section aggregates fairness comparisons and SHAP/feature-attribution figures exported by the notebook.</p>")

          if figs:
              gallery_html.append("<div class='gallery-grid'>")
              for p in figs:
                  name = html.escape(p.name)
                  rel  = p.relative_to(root).as_posix()
                  gallery_html.append(
                      f"<figure><a href='{rel}' target='_blank' rel='noopener'>"
                      f"<img src='{rel}' alt='{name}'></a>"
                      f"<figcaption>{name}</figcaption></figure>"
                  )
              gallery_html.append("</div>")
          else:
              gallery_html.append("<i>No figures were found in <code>docs/assets/figures/</code>.</i>")

          dls = sorted([p for p in dl_dir.glob("*") if p.is_file()])
          if dls:
              gallery_html.append("<h3>Downloads</h3><ul>")
              for p in dls:
                  name = html.escape(p.name)
                  rel  = p.relative_to(root).as_posix()
                  gallery_html.append(f"<li><a href='{rel}'>{name}</a></li>")
              gallery_html.append("</ul>")

          inject_block = "\n".join(gallery_html) + "\n"

          html_text = index.read_text(encoding="utf-8")
          lower = html_text.lower()
          anchor = lower.rfind("</body>")
          if anchor != -1:
              new_html = html_text[:anchor] + inject_block + html_text[anchor:]
          else:
              new_html = html_text + inject_block

          index.write_text(new_html, encoding="utf-8")
          print(f"Injected gallery with {len(figs)} figures.")
          PY

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact (publish docs/ as site root)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
